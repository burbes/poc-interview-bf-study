pipeline {
    agent any
    
    environment {
        HOME = "${env.WORKSPACE}"
        MAVEN_OPTS = '-Xmx512m'
        // ARTIFACTORY_CREDENTIALS = credentials('artifactory-credentials')
        // SONAR_CREDENTIALS = credentials('sonar-credentials')
        DOCKER_CREDENTIALS = credentials('docker-credentials')
        DOCKER_REGISTRY = 'docker.io'
        DOCKER_USERNAME = 'burbes'
        DOCKER_REPO = 'task-management-system'
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
                sh 'git --version'
                sh 'mvn --version'
                echo "Building branch: ${env.BRANCH_NAME}"
            }
        }
        stage('Debug Info') {
            steps {
                echo "Pipeline started"
                echo "BRANCH_NAME: ${env.BRANCH_NAME}"
                echo "WORKSPACE: ${env.WORKSPACE}"
                sh 'printenv'
            }
        }
        
        stage('Clean & Compile') {
            steps {
                sh 'cd task-management-system && mvn clean compile'
            }
        }
        
        stage('Test') {
            steps {
                sh 'cd task-management-system && mvn test'
            }
            post {
                always {
                    junit '**/target/surefire-reports/*.xml'
                }
            }
        }
        
        stage('Code Quality Analysis') {
            steps {
                // withSonarQubeEnv('SonarQube') {
                //     sh '''
                //         mvn sonar:sonar \
                //         -Dsonar.projectKey=task-management-system \
                //         -Dsonar.host.url=${SONAR_HOST} \
                //         -Dsonar.login=${SONAR_CREDENTIALS}
                //     '''
                // }
                echo 'SonarQube analysis skipped.'
            }
        }
        
        stage('Package') {
            steps {
                sh 'cd task-management-system && mvn package -DskipTests'
                archiveArtifacts artifacts: 'task-management-system/target/*.jar', fingerprint: true
            }
        }
        
        // stage('Publish to Artifactory') {
        //     //when {
        //     //     expression { env.BRANCH_NAME == 'main' || env.BRANCH_NAME == 'develop' }
        //     //  }
        //     steps {
        //         script {
        //             def server = Artifactory.server 'artifactory-server'
        //             def buildInfo = Artifactory.newBuildInfo()
        //             buildInfo.env.capture = true
        //             def rtMaven = Artifactory.newMavenBuild()
        //             rtMaven.tool = 'Maven'
        //             rtMaven.deployer releaseRepo: 'libs-release-local', snapshotRepo: 'libs-snapshot-local', server: server
        //             rtMaven.deployer.deployArtifacts = true
        //             rtMaven.run pom: 'pom.xml', goals: 'install', buildInfo: buildInfo
        //             server.publishBuildInfo buildInfo
        //         }
        //     }
        // }
        
        stage('Build Docker Image') {
            // when {
            //     expression { env.BRANCH_NAME == 'main' || env.BRANCH_NAME == 'develop' }
            // }
            steps {
                script {
                    def imageTag = "${env.BRANCH_NAME}-${env.BUILD_NUMBER}-${env.GIT_COMMIT.substring(0,7)}"
                    env.IMAGE_TAG = imageTag
                    env.FULL_IMAGE_NAME = "${env.DOCKER_USERNAME}/${env.DOCKER_REPO}"
                    sh "docker build -t ${env.FULL_IMAGE_NAME}:${imageTag} -f task-management-system/docker/Dockerfile task-management-system"
                }
            }
        }
        
        stage('Push Docker Image') {
            // when {
            //     expression { env.BRANCH_NAME == 'main' || env.BRANCH_NAME == 'develop' }
            // }
            steps {
                script {
                    // Using Docker Hub registry with secure credentials
                    withCredentials([usernamePassword(credentialsId: 'docker-credentials', passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) {
                        // Login to Docker Hub
                        sh 'echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin'
                        
                        // Push the image to Docker Hub
                        sh "docker push ${env.FULL_IMAGE_NAME}:${env.IMAGE_TAG}"
                        
                        // If it's main branch, also tag as latest
                        if (env.BRANCH_NAME == 'main') {
                            sh "docker tag ${env.FULL_IMAGE_NAME}:${env.IMAGE_TAG} ${env.FULL_IMAGE_NAME}:latest"
                            sh "docker push ${env.FULL_IMAGE_NAME}:latest"
                        }
                        
                        // Logout for security
                        sh 'docker logout'
                    }
                }
            }
        }
        
        stage('Deploy to Dev') {
            // when {
            //     expression { env.BRANCH_NAME == 'develop' }
            // }
            steps {
                echo 'Deploying to Development environment...'
                // Use Ansible for deployment
                ansiblePlaybook(
                    playbook: 'ansible/playbooks/deploy-dev.yml',
                    inventory: 'ansible/inventory/dev',
                    extraVars: [
                        app_version: "${env.BUILD_NUMBER}",
                        environment: 'dev',
                        docker_image: "${env.FULL_IMAGE_NAME}:${env.IMAGE_TAG}"
                    ]
                )
            }
        }
        
        stage('Deploy to Staging') {
            // when {
            //     expression { env.BRANCH_NAME == 'main' }
            // }
            steps {
                echo 'Deploying to Staging environment...'
                // Manual approval before deploying to staging
                input message: 'Deploy to Staging environment?', ok: 'Deploy'
                // Use Ansible for deployment
                ansiblePlaybook(
                    playbook: 'ansible/playbooks/deploy-staging.yml',
                    inventory: 'ansible/inventory/staging',
                    extraVars: [
                        app_version: "${env.BUILD_NUMBER}",
                        environment: 'staging',
                        docker_image: "${env.FULL_IMAGE_NAME}:${env.IMAGE_TAG}"
                    ]
                )
            }
        }
        
        stage('Deploy to Production') {
            // when {
            //     expression { env.BRANCH_NAME == 'main' }
            // }
            steps {
                echo 'Deploying to Production environment...'
                // Manual approval before deploying to production
                input message: 'Deploy to Production environment?', ok: 'Deploy'
                // Use Ansible for deployment
                ansiblePlaybook(
                    playbook: 'ansible/playbooks/deploy-prod.yml',
                    inventory: 'ansible/inventory/prod',
                    extraVars: [
                        app_version: "${env.BUILD_NUMBER}",
                        environment: 'prod',
                        docker_image: "${env.FULL_IMAGE_NAME}:${env.IMAGE_TAG}"
                    ]
                )
            }
        }
        
        stage('Rollback') {
            // when {
            //     beforeAgent true
            //     expression { params.ROLLBACK_TO_TAG != null && params.ROLLBACK_TO_TAG != '' }
            // }
            steps {
                echo "Rolling back to Docker image tag: ${params.ROLLBACK_TO_TAG}"
                // Use Ansible to redeploy previous image
                ansiblePlaybook(
                    playbook: 'ansible/playbooks/deploy-${env.ENVIRONMENT}.yml',
                    inventory: "ansible/inventory/${env.ENVIRONMENT}",
                    extraVars: [
                        app_version: "${params.ROLLBACK_TO_TAG}",
                        environment: env.ENVIRONMENT,
                        docker_image: "${env.DOCKER_USERNAME}/${env.DOCKER_REPO}:${params.ROLLBACK_TO_TAG}"
                    ]
                )
            }
        }
    }
    
    post {
        always {
            echo 'Pipeline execution completed'
            // Ensure we're logged out of Docker for security
            sh 'docker logout || true'
            // Clean workspace
            cleanWs()
        }
        success {
            echo 'Pipeline executed successfully'
            // Send success notification
            // mail to: 'team@example.com',
            //      subject: "Pipeline succeeded: ${currentBuild.fullDisplayName}",
            //      body: "The pipeline ${env.JOB_NAME} completed successfully. Build URL: ${env.BUILD_URL}"
        }
        failure {
            echo 'Pipeline execution failed'
            // Send failure notification
            // mail to: 'team@example.com',
            //      subject: "Pipeline failed: ${currentBuild.fullDisplayName}",
            //      body: "The pipeline ${env.JOB_NAME} failed. Build URL: ${env.BUILD_URL}"
        }
    }
}

